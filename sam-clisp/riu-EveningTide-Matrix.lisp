;; Riu

(defvar *sme-loaded* nil)
(defvar *riu-debug* '())
(setf *riu-debug* '())
;; (setf *riu-debug* '(analogy discourse retrieval prediction intentionality))
;; (setf *riu-debug* '(prediction))

(unless *sme-loaded* (load "sme-load.lisp"))

(load "riu-utils.lisp")
(load "riu-retrieval.lisp")
(load "riu-analogy.lisp")
(load "riu-discourse.lisp")
(load "riu-scene-instantiation.lisp")
(load "riu-bdi.lisp")

(defun matrix ()
	;; Load the evening tide story:
	(setf *riu-STORY-DAG* nil)
	(setf *riu-STORY-START* 'STORY01-1)
	(setf *riu-GOALS* nil)
	(setf *riu-MEMORY* nil)
	(setf *riu-GOALS*
		'((happy 
			(happy fun play cute)
			(sad dead bored work force rusty awkward))
		  (sad 
			(sad dead bored work force rusty awkward)
			(happy fun play cute))
		)
	)

	(load "stories/EveningTide/S01")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S02A")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S02B")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S03")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S04")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S05a")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S05b")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S06")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S07a")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S07b")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S08")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S09")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S10")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S11A")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S11B")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S12")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S13")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S14")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S15")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S16")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S17")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S18a")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S19")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S20")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))
	(load "stories/EveningTide/S21")
	(setf *riu-STORY-DAG* (cons *story* *riu-STORY-DAG*))


	(load "stories/EveningTide/mem01_V2")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem02")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem03")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem05")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem06")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem09")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem10")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem12")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem18")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem19")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))
	(load "stories/EveningTide/mem20")
	(setf *riu-MEMORY* (cons *story* *riu-MEMORY*))

	(let* ((story (list *riu-STORY-START* *riu-STORY-DAG*))
		   (memories (compute-keywords *riu-MEMORY*)))
		
		;; Set up each of the memory retrieval points from the story:
		(let* ((memory-points '(
								(MP1 STORY-01 phase1 continues-his-descent)
								(MP2 STORY-01 phase1 swims-back-to-his-boat)
								(MP3 STORY-01 phase1 races-after-fish)
								(MP4 STORY-02A phase1 nil)
								(MP5 STORY-02B phase1 swim-faster)
								(MP6 STORY-02B phase1 catch-breath)
								(MP7 STORY-03 phase1 enter-ship)
								(MP8 STORY-03 phase1 return-to-surface)
								;; (MP9 STORY-04 phase2 nil)
								(MP10 STORY-04 phase2 force-door)
								(MP11 STORY-04 phase2 find-another-entrance)
								(MP12 STORY-04 phase2 return-to-surface)
								(MP13 STORY-05A phase2 nil)
								(MP14 STORY-05B phase2 go-down-to-cabin)
								(MP15 STORY-05B phase2 stay-on-deck)
								;; (MP16 STORY-06 phase2 nil)
								(MP17 STORY-06 phase2 return-to-boat)
								(MP18 STORY-06 phase2 go-deeper)
								(MP19 STORY-07A phase1 nil)
								(MP20 STORY-07B phase1 go-deeper)
								(MP21 STORY-07B phase1 return-to-his-boat)
								;; (MP22 STORY-08 phase1 nil)
								(MP23 STORY-08 phase1 find-another-entrance)
								(MP24 STORY-08 phase1 return-to-surface)
								(MP25 STORY-08 phase1 try-again)
								;; (MP26 STORY-09 phase1 nil)
								(MP27 STORY-09 phase1 return-to-surface)
								(MP28 STORY-09 phase1 return-to-door)
								(MP29 STORY-10 phase1 nil)
								(MP30 STORY-10 phase1 fetch-fishing-net)
								(MP31 STORY-10 phase1 seek-shelter)
								(MP32 STORY-10 phase1 get-better-look)
								(MP33 STORY-11A phase2 nil)
								(MP34 STORY-11B phase2 stay-on-deck)
								(MP35 STORY-11B phase2 go-down-to-cabin )
								(MP36 STORY-11B phase2 nil)
								(MP37 STORY-12 phase1 catch-it)
								(MP38 STORY-12 phase1 seek-shelter-downstairs)
								;; (MP39 STORY-14 phase2 keep-it)
								(MP40 STORY-14 phase2 throw-it)
								(MP41 STORY-15 phase1 nil)
								;; (MP42 STORY-15 phase1 push-it)
								;; (MP43 STORY-15 phase1 hold-it-back)
								(MP44 STORY-16 phase1 nil)  
								(MP45 STORY-16 phase2 nil)
								(MP46 STORY-17 phase1 nil)
								(MP47 STORY-18a phase1 nil)
								(MP48 STORY-20 phase1 nil)
								(MP49 STORY-21 phase1 nil)
							   ))
			   (memory-points-state (reconstruct-memory-point-states memory-points *riu-STORY-DAG*))
			  )

			;; Compute the similarities:
			(dolist (memory-point memory-points-state)
				(format t "surfaceSimilarity[\"~a\"] = {" (car memory-point))
				(dolist (m memories)
					(let ((kws (compute-block-keywords memory-point))
						  (kwm (rest (assoc ':keywords (rest m)))))
						;;(format t "~a ~a ~%" (car memory-point) (car m))
						(let* ((keyword-similarity (keyword-similarity kws kwm)))
							(format t "\"~a\":~a, " (car m) keyword-similarity)
						)
					)
				)
				(format t "};~%")
				(format t "structuralSimilarity[\"~a\"] = {" (car memory-point))
				(dolist (m memories)
					(let ((kws (compute-block-keywords memory-point))
						  (kwm (rest (assoc ':keywords (rest m)))))
						;;(format t "~a ~a ~%" (car memory-point) (car m))
						(let* ((pairing (list (cons (last-phase-of-scene memory-point) (last-phase-of-scene m))))
							   (structural-similarity (scene-similarity-SME memory-point m pairing))
							  )
							(format t "\"~a\":~a, " (car m) structural-similarity)
						)
					)
				)
				(format t "};~%")				
			)
		)
	)
)

(defun keyword-similarity (kw1 kw2)
	(let* ((common (intersection kw1 kw2))
		   (similarity (/ (float (* 2 (length common))) (float (+ (length kw1) (length kw2))))))
		similarity
	)
)


(defun scene-similarity-SME (scene1 scene2 pairing)
	(let ((analogy (analogy-general scene1 scene2 pairing)))
		(if (null analogy)
			0.0
			(first analogy)
		)
	)
)




(defun reconstruct-memory-point-states (memory-points story-dag)
	(if (null memory-points)
		()
		(cons (reconstruct-memory-point-state (caar memory-points) (cadar memory-points) (caddar memory-points) (car (cdddar memory-points)) story-dag)
			  (reconstruct-memory-point-states (cdr memory-points) story-dag))
	)
)


(defun reconstruct-memory-point-state (id sceneid phase action story-dag)
	(let* ((scene (rest (assoc sceneid story-dag)))
		   (common-phase (cdr (assoc 'common (cdr (assoc ':structure scene)))))
		   (desired-phase (cdr (assoc phase (cdr (assoc ':structure scene)))))
		   (additional-elements 	    
		   			(if (not (null action)) 
	    				(let ((action-block (find-named-substructure (cdr (assoc ':clauses (cdr (assoc ':discourse scene)))) action)))
	    					(list (cons ':entities (fourth action-block)) (cons ':expressions (fifth action-block)))
	    				)
	    				(list (cons ':entities nil) (cons ':expressions nil))
	    			)
		   )
		  )
;;		(print common-phase)
;;		(print desired-phase)
;;		(print additional-elements)
;;		(print (merge-phases (merge-phases common-phase desired-phase) additional-elements))
		
		(list id (list ':structure 
					(cons phase (merge-phases (merge-phases common-phase desired-phase) additional-elements))))
	)
)


(defun merge-phases (p1 p2)
	(list (cons ':entities
			(append (rest (assoc ':entities p1)) (rest (assoc ':entities p2)))
		  )
	  	  (cons ':expressions
			(append (rest (assoc ':expressions p1)) (rest (assoc ':expressions p2)))
	  	  ))
)

(defun last-phase-of-scene (scene)
	(car (last (mapcar #'car (rest (assoc ':structure (rest scene))))))
)


(matrix)